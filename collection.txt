July 9
 
 video 1
2020/11/12  1:04  hr    Revision April 6 2024 
 
Collections 
- Deals with object
- collection/group of object 
- row record in table stored data in seperate object 
- collection is a framework(readily available logic in it) helps to store group of objects in it.

List 
- store item in sequence 
- interface (consists of incomplete method's)
- implemented using ArrayList, Vector, LinkedList in this class (incomplete method's from interface implemented in the class)
Vector - bad performance due to synchronization(only 1 thread access at a time)
ArrayList
  - ArrayList x = new ArrayList(); //default initial size is  10 but not fixed (dynamic in nature) increase 1.5times if it reaches size 10
  - Stores the data in the form of objects not literals 
  - maintains insertion order
  - It can consists of duplicate elements 
  - performance - reading value constant speed, when we want to insert data in between we need to shift entire to 1 shift (decrease performance)   inserting at end(no problem)
  - store heterogenous data  
  avoid heterogenous storing and store only related data type - Generics 
  Boxing - wrapping of values in object 
  all collection package present in java.util package rt.jar 
  store object using add method 
  In interface we can have complete method from java 1.8
package com.collection;
 
import java.util.ArrayList;
 
public class ArrayListClass {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList x = new ArrayList();
		x.add(10); //It will call the add method of List class do the processing logic
		x.add(20); //Internally stored in object 
		x.add(new Integer(30)); //Boxing
		//store heterogenous data
		x.add(10.3);
		x.add(true); //getting warnings to use generics 
		System.out.println(x);
		ArrayList<Integer> y = new ArrayList<>(); //<> Generics to store similar data type
		y.add(100);
		y.add(200);
		System.out.println("add method():"+y);
		ArrayList<Integer> z = new ArrayList<>();
		z.add(5);
		z.add(10);
		z.add(1, 20); //For insertion at index 1 with value 20
		System.out.println("add(index,value) method():"+z);
		z.addAll(y); //inserting collection of y elements to z
		System.out.println("addAll(collection) method():"+z);
		z.addAll(2,y); //inserting collection of y elements to z at index 2
		System.out.println("addAll(index,collection) method():"+z);
		if(z.contains(5)) //search operation 
		{
			System.out.println("element found in list");
		}
		else
		{
			System.out.println("element did not found in list");
		}
       System.out.println(z);
      z.remove(1); //remove element from list at position 1
      System.out.println("remove(index) method:" + z);

	}
 
}
 
o/p
[10, 20, 30, 10.3, true]
add method():[100, 200]
add(index,value) method():[5, 20, 10]
addAll(collection) method():[5, 20, 10, 100, 200]
addAll(index,collection) method():[5, 20, 100, 200, 10, 100, 200]
element found in list
[5, 20, 100, 200, 10, 100, 200]
remove(index) method:[5, 100, 200, 10, 100, 200]


video 2 17/11/2020 - April 16 2024

public class A2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ArrayList<Integer> x = new ArrayList<Integer>();
		//adding into array list
		x.add(10);
		x.add(20);
		x.add(30);
		
		//fetch values from arraylist using iterator 
		
		Iterator y = x.iterator();
		
		while(y.hasNext())
		{
			System.out.println("elements from arraylist: " + y.next());
		}
	}

}

o/p
elements from arraylist: 10
elements from arraylist: 20
elements from arraylist: 30


Video 2 17/11/2020 April 7 2024
--LinkedList---

List
Single linked list
doubly linked list

Single linked list
 - node = value of object + address of next node
 - unidirectional 
 - dis : occupy more memory - two field one for value and other to hold address
 
 doubly linked list
  - node = add of previous node + value of object + add of next node
  - bidirectional 

public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//creating a new linkedlist
	//	 LinkedList x = new LinkedList();
	//	 LinkedList<Integer> x = new LinkedList<Integer>();
		//works for all scenarios and below is auto upcasting
		//internally implemented as doubly linked list 
		List<Integer> x = new LinkedList<Integer>();
		 
		 x.add(10); //auto boxing - wrapping of values in object
		 
		 x.add(20);
		 
		 x.add(new Integer(30));
		 
		 System.out.println("add() method: " + x);
		 
		 x.add(2, 40);
		 
		 System.out.println("add(index, value) method: "+x);
		 
		 x.remove(3);
		 
		 System.out.println("remove(index) method: "+ x);
		 
		 LinkedList y = new LinkedList();
		 y.add(100);
		 y.add(200);
		 y.add(300);
		 System.out.println("add() method: " + y);
		 
		 x.addAll(1, y);
		 System.out.println("add(index, collection) method: "+ x);
		 
		 x.get(1);
		 
		 System.out.println("get() method: "+x);
		 
		 Iterator<Integer> iterator = x.iterator();
		 while(iterator.hasNext())
		 {
			 System.out.println("value of x: "+iterator.next());
		 }

	}


o/p:
 add() method: [10, 20, 30]
add(index, value) method: [10, 20, 40, 30]
remove(index) method: [10, 20, 40]
add() method: [100, 200, 300]
add(index, collection) method: [10, 100, 200, 300, 20, 40]
get() method: [10, 100, 200, 300, 20, 40]
value of x: 10
value of x: 100
value of x: 200
value of x: 300
value of x: 20
value of x: 40
 
 
public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		LinkedList<Integer> x = new LinkedList<Integer>();
		x.add(10);
		
		x.add(20);
		
		System.out.println("add() method: "+x);
		
		x.addFirst(5);
		
		System.out.println("addFirst() method: "+ x);
		
		x.addLast(30);
		
		System.out.println("addLast() method: "+ x);

	}
	
	
o/p:
add() method: [10, 20]
addFirst() method: [5, 10, 20]
addLast() method: [5, 10, 20, 30]



ArrayList and LinkedList consists of duplicate elements 

Video 3 18/11/2020 -- April 7 2024

Hash Table
 - data stored in hash table as key value pair
 - key might be anything integer, String, any data type
- hashCode - convert memory address(hexadecimal) to integer value (present in Object class(super most class) - child to it String class)
 - internally implemented as array
 - 2 values pointing to same index - collision 
 - hashing is a technique to store integer value
 - 
 
 - 

Video 4 19/11/2020 April 8 2024
Set is interface 
  - HashSet
  - TreeSet
  
 Queue
  - priorityQueue
  
 Map
  - HashMap
  
 Sets
  - its interface
  - cannot contain duplicate values
  - does not maintain insertion order
  

  HashSet
  -internally uses hashtable (not means it will store key value pair it means storing integer value)
  - contain unique elements
  - does not maintain insertion order
  - not synchronized
  - can have null value
  - we can add duplicate element but it will not print
  
  HashSet and LinkedHashSet
   - HashSet will not maintain insertion order
   - LinkedHashSet maintain insertion order
   
   TreeSet
   - It sorts the data and store in ascending order
   
   
  HashMap
  - content stored as key value pair
  - key can be null or value can be null
  - internally used hashtable
  - hash map not synchronized
  
  
    Video 5 20/11/2020 April 10 2024
  comparator
  -it's an interface and compares object content
	-in sorting if obj1 comes first return +ve value
	-if obj2 comes first then -ve value
-if both same return 0

public class A {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String x = "xyz";
		String y = "abc";
		
		//in sorting if obj1 comes first then it will return +ve value
		System.out.println(x.compareTo(y)); //23
		
		//if obj2 comes first then it will return -ve value
		System.out.println(y.compareTo(x)); //-23


	}

}
  
