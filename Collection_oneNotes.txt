Collection:
 
- Deals with object
- collection/group of object (rt.jar - java.util.*)
- row record in table stored data in seperate object 
- collection is a framework(readily available logic in it) helps to store group of objects in it.

List 
- store item in sequence 
- interface (consists of incomplete method's)
- implemented using ArrayList, Vector, LinkedList in this class (incomplete method's from interface implemented in the class)
Vector - bad performance due to synchronization(only 1 thread access at a time)


ArrayList cheat sheet

-maintain insertion order
-internally implemented as dynamic array
-initial size array 10 as size exceed initial it becomes double
-consists of duplicate elements
-can store heterogenous data if we did not restrict using Generics

Performance
-reading value - better performance
-insert in between performance decreases

public class A {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		ArrayList x = new ArrayList();
		
		x.add(10); //Boxing (internally it will convert into x.add(new Integer(10)));
		
		//adding element in ArrayList method add();
		x.add(20);
		
		x.add(new Integer(30)); //by default it will convert into this type
		
		//we can store heterogenous elements in it
		x.add(10.3);
		
		x.add(true);
		
		x.add("kiran");
//		x.clear();  //delete all elements from arraylist
		
		System.out.println(x);

	}

}

o/p:
[10, 20, 30, 10.3, true, kiran]


public class A1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//creating an empty array list and using Generics we can store only homogenous data in it
		ArrayList<Integer> x = new ArrayList<Integer>();
		
		//adding integer value in it
		x.add(10); //auto Boxing - storing value in object
		
		x.add(20);
		
		x.add(new Integer(30)); 
		
		System.out.println("add() method: "+ x);
		
		x.add(1, 40);
		
		System.out.println("add(index, value) method: "+x);
		
		ArrayList<Integer> y = new ArrayList<Integer>();
		y.add(300);
		y.add(400);
		
		x.addAll(1, y);
		
		System.out.println("add(index, collection) method: "+ x);
		
		if(x.contains(300))
		{
			System.out.println("present: ");
		}
		else
		{
			System.out.println("not present: ");
		}
		
		//to get particular element based on index number
		System.out.println(x.get(1));
		
		//through iterator fetch the value from the array list
		Iterator iterator = x.iterator();
		System.out.println("iterator: " + iterator);
		while(iterator.hasNext())
		{
			System.out.println("value of x: " + iterator.next());
		}
		
		x.remove(5);
		System.out.println("remove(index) method: "+x);

	}

}

o/p:
add() method: [10, 20, 30]
add(index, value) method: [10, 40, 20, 30]
add(index, collection) method: [10, 300, 400, 40, 20, 30]
present: 
300
iterator: java.util.ArrayList$Itr@cac736f
value of x: 10
value of x: 300
value of x: 400
value of x: 40
value of x: 20
value of x: 30
remove(index) method: [10, 300, 400, 40, 20]

ArrayList Methods:
x.add(10); // to add elements into array list  - auto boxing 
x.add(new Integer(30)); //
x.add(1, 40); //add at particular index
x.addAll(1, y); //add all elements from other arraylist to x at specific position
x.contains(300) // to check value contains or not
x.get(1) // to get particular element based on index number
x.remove(5); //remove value from particular index in array list

We will fetch the values through iterator

Iterator iterator = x.iterator();
while(iterator.hasNext())
	{
		System.out.println("value of x: " + iterator.next());
	}



ArrayList vs LinkedList
Continous memory allocation
In case linkedlist not a continuous memory allocation

Arraylist and linkedlist consists of duplicate values

LinkedList

Single linked list
 - node contains - value of object + address of next node
	- Reading data unidirectional

Performance
 - adding first - good performance
	- Adding last or in between less performance

Dis
 - more memory consumes - value and address to store

Doubly linked list
	- Node contains - address of previous node + value of object + address of next node
	- Reading data bi directional
	- By default implemented as doubly linked list

Performace
-adding first or last - good
	- Inbetween performance decreases

LinkedList Methods

	-  x.add(10); //add element into linked list
	- x.add(2, 40); //add at particular index
	- x.remove(3); //remove elements from particular index
	-  x.addAll(1, y); //add elements from y to x at particular index
	- x.get(1); //fetch value from particular index
	- Fetch values
	 Iterator<Integer> iterator = x.iterator();
			 while(iterator.hasNext())
			 {
				 System.out.println("value of x: "+iterator.next());
			 }
   - x.addFirst(5); //add first to the linked list
   - x.addLast(30); //add last
  - empDetails.size(); //size of linkedlist
	- 
	


LinkedList x = new LinkedList();

LinkedList<Integer> x = new LinkedList<Integer>();
List<Integer> x = new LinkedList<Integer>(); // auto upcasting in our code base used in this way

x.add(10);
x.add(new Integer(20));
x.add(1,40);

LinkedList<Integer> y = new LinkedList<Integer>();
x.addAll(1,y);

x.addFirst(30);
x.addLast(40);

Iterator itr =x.iterator();
While(itr.hasNext())
{
Sysout(itr.next());
}


For loop and enhanced for loop(for each loop)

for(Employee employee : empDetails)
		{
			System.out.println(employee.getFirstName());
			System.out.println(employee.getLastName());
			System.out.println(employee.getAge());
		}

//simple for loop



for(int i=0;i<empDetails.size();i++)
		{
			Employee emp = empDetails.get(i);
			System.out.println(emp.getFirstName());
			System.out.println(emp.getLastName());
			System.out.println(emp.getAge());
		}


                                  Collection                                                                              Map

        List                     Set                 Queue
   - ArrayList          - HashSet         - PriorityQueue                            HashMap              Dictionary
   - LinkedList       - TreeSet                                                                                                  HashTable
  - Vector


HashTable
 hashing is a technique to store integer value
 hashcode - converts memory address into the integer value
 stored as key value pair
	- 2 values pointing to same index leads to collision - to solve we store data as list mapped to same index number
	- Hashtable are synchronized

public class A {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String x = "kiran";
		System.out.println(x.hashCode());
		
		String y = "Mia";
		System.out.println(y.hashCode());
		
		String z = "ab";
		System.out.println(z.hashCode());

	}

}

o/p:

102057473
77349
3105


public class HashTableExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Hashtable< Integer, String> hashtable=new Hashtable<Integer, String>();
		hashtable.put(100, "kiran");
		hashtable.put(200, "ram");
		hashtable.put(300, "shiva");
		System.out.println("hashtable: "+hashtable);
	}

}
o/p:
hashtable: {300=shiva, 200=ram, 100=kiran}


HashSet
 - does not contain duplicate values
	- Does not maintain insertion order
  - it uses hash table internally
	- It uses hashing to inject data into the db
	- Not synchronized
	- Permits null value
 
HashSet - LinkedHashSet\


	- Maintains insertion order
	- Contains only unique elements


HashSet<Integer> hashSet = new HashSet<Integer>();

hashSet.add(10);
hashSet.add(null);

System.out.println("add() method: "+hashSet);

LinkedHashSet - same but maintains insertion order

public class A1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//maintain insertion order and contain unique elements
		LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<Integer>();
		linkedHashSet.add(10);
		linkedHashSet.add(20);
		linkedHashSet.add(30);
		linkedHashSet.add(new Integer(40));
		linkedHashSet.add(null);
		linkedHashSet.add(40);
		
		System.out.println("add() method: "+linkedHashSet);

	}

}

o/p:
add() method: [10, 20, 30, 40, null]


TreeSet - sort based on ascending order and contains unique elements(can have null values)
 - we can add duplicate elements but in o/p we won't be able to see it.

HashMap
 - content stored as key and value pair
 - key can be null and value can be null
	- Internally uses hash table.
	- Inject data using hashing technique
	- Hash map not synchronized
	- Accessing elements faster than the db.
	

HashMap<Integer, String> studentInfo = new HashMap<Integer, String>();
		studentInfo.put(100, "kiran");
		studentInfo.put(200, "pavan");
		studentInfo.put(300, "rahul");
		
		System.out.println("put(integer,string) method: "+studentInfo);
		
		
		System.out.println("to fetch the value based on key: "+ studentInfo.get(100));
		System.out.println("to fetch the all values from hashmap:" + studentInfo.values());
        System.out.println("to fetch the all keys from hashmap:"+studentInfo.keySet());

o/p:
put(integer,string) method: {100=kiran, 200=pavan, 300=rahul}
to fetch the value based on key: kiran
to fetch the all values from hashmap:[kiran, pavan, rahul]
to fetch the all keys from hashmap:[100, 200, 300]


Comparator
-it's an interface and compares object content
	-in sorting if obj1 comes first return +ve value
	-if obj2 comes first then -ve value
	-if both same return 0
	
	
String x = "xyz";
String y = "abc";

x.compareTo(y) // 23
y.compareTo(x) // -23

Generics
  - restrict to specific data type
 
public class A<T> {
	
	T val;
	
	A(T x)
	{
		this.val = x;
		System.out.println(x);
		
	}
	

}


public class B {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
         
		//what ever A<> copied into the T
		A<String> a1 = new A<String>("abc");
		
		A<Integer> a2 = new A<Integer>(100);
		
		A<Character> a3 = new A<Character>('a');
	}

}

o/p:
abc
100
a

Java 9 - added jshell
Jdk 10 - var data type
